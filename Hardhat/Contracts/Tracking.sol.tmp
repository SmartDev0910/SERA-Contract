//SPDX-License-Identifier: UNLICENSED

// Solidity files have to start with this pragma.
// It will be used by the Solidity compiler to validate its version.
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/access/Ownable.sol";
// import "./Provenance.sol";

contract Tracking is Ownable {

    // Provenance provenances;

    enum ActionStatus {
        INPROGRESS,
        SUCCESS,
        FAILURE,
        CANCELED
    }

    struct Shipment {
        address sender;
        address recipient;
        uint start_time;
        uint256 item1;
        uint256 quantity1;
        uint256 item2;
        uint256 quantity2;
        uint256 item3;
        uint256 quantity3;
        bool receiver_sign;
        ActionStatus action_status;
    }

    struct Condition {
        uint end_time;
        string destination;
        uint256 token_amount;
    }

    event Log(string text);

    uint256 public purchase_id;
    mapping(address => uint256) public balances;
    mapping(uint256 => Shipment) public shipments;
    mapping(uint256 => Condition) public conditions;
    mapping(address => uint256) public shipment_list;
    mapping(address => uint256) public success_shipment_list;

    constructor(address _address) {
        // provenances = Provenance(_address);
        purchase_id = 0;
    }

    function sendToken(address from, address to, uint256 token_amount) private {
        require(balances[from] >= token_amount, "You do not have enough tokens.");
        balances[from] =  balances[from] - token_amount;
        balances[to] =  balances[to] + token_amount;

        emit Log("Payment sent.");
    }

    function getBalance(address supplier) public view returns (uint256) {
        return balances[supplier];
    }

    function recoverToken(uint purchase_cid) public onlyOwner {
        balances[shipments[purchase_cid].sender] -= conditions[purchase_cid].token_amount;
        balances[shipments[purchase_cid].recipient] += conditions[purchase_cid].token_amount;
    }

    function setContractParameters(uint256 purchase_cid, uint end_time, string memory destination, uint256 token_amount) public onlyOwner {
        conditions[purchase_cid] = Condition(end_time, destination, token_amount);
    }

    // For testing sendShipment.
    function createContract(address recipient, uint256 item1, uint256 quantity1, uint256 item2, uint256 quantity2, uint256 item3, uint256 quantity3) public {
        shipments[purchase_id] = Shipment(msg.sender, recipient, block.timestamp, item1, quantity1, item2, quantity2, item3, quantity3, false, ActionStatus.INPROGRESS);
        purchase_id ++;
        shipment_list[msg.sender] ++;
    }
    //For testing receiveShipment
    function purchaseOrder(uint256 purchase_cid) public {
        shipments[purchase_cid].receiver_sign = true;
    }
    //For testing IssueInvoice
    function issueInvoice(uint256 purchase_cid) public {
        uint256 token_amount;
        if(shipments[purchase_cid].recipient != msg.sender){
            emit Log("This shipment is not yours.");
            shipments[purchase_cid].action_status = ActionStatus.FAILURE;
        } 
        else if(shipments[purchase_cid].receiver_sign == false) {
            emit Log("The receiver did not sign.");

            if(block.timestamp <= (shipments[purchase_cid].start_time + conditions[purchase_cid].end_time)) {
                sendToken(msg.sender, shipments[purchase_cid].sender, token_amount);
                shipments[purchase_cid].action_status = ActionStatus.SUCCESS;
                success_shipment_list[shipments[purchase_cid].sender] ++;
            } else {
                emit Log("Payment not triggered as criteria not met");
            }
        }

    }

    /*
    function sendShipment(uint256 purchase_cid, uint256 item, address recipient, uint256 quantity) public {
        require(provenances.findProducer(msg.sender).certification, "This producer is not certified.");
        require(provenances.findProduct(item).producer_address != address(0), "This product is not registered.");
        shipments[purchase_cid] = Shipment(msg.sender, recipient, block.timestamp, item, quantity, ActionStatus.INPROGRESS);
        shipment_list[msg.sender] ++;
    }

    function receiveShipment(uint256 purchase_cid, uint256 item, uint256 quantity) public {
        if(shipments[purchase_cid].recipient != msg.sender){
            emit Log("This shipment is not yours.");
            shipments[purchase_cid].action_status = ActionStatus.FAILURE;
        } else if((shipments[purchase_cid].item != item) || (shipments[purchase_cid].quantity != quantity)) {
            emit Log("Item/quantity do not match");
            shipments[purchase_cid].action_status = ActionStatus.FAILURE;
        } else {
            emit Log("Item received.");

            if(block.timestamp <= (shipments[purchase_cid].start_time + conditions[purchase_cid].end_time)) {
                sendToken(msg.sender, shipments[purchase_cid].sender, conditions[purchase_cid].token_amount);
                shipments[purchase_cid].action_status = ActionStatus.SUCCESS;
                success_shipment_list[shipments[purchase_cid].sender] ++;
            } else {
                emit Log("Payment not triggered as criteria not met");
            }
        }
    }
    */
    function deleteShipment(uint256 purchase_cid) public onlyOwner {
        shipments[purchase_cid].action_status = ActionStatus.CANCELED;
        shipment_list[shipments[purchase_cid].sender] --;
    }
    
    function checkShipment(uint256 purchase_cid) public view returns (Shipment memory) {
        return shipments[purchase_cid];
    }
    
    function checkSuccess(address recipient) public view returns (uint256) {
        return success_shipment_list[recipient];
    }
    
    function calculateReputation(address recipient) public view returns (uint256)  {
        if(shipment_list[recipient] > 0){
            return (uint256) (success_shipment_list[recipient] * 100 / shipment_list[recipient]);
        } else {
            return 0;
        }
    }
}
